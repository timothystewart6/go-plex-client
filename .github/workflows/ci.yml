name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.4.0
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Check gofmt
        run: |
          echo "Checking gofmt..."
          files=$(gofmt -s -l .)
          if [ -n "$files" ]; then
            echo "The following files need gofmt -s (please run 'gofmt -s -w .' locally):"
            echo "$files"
            exit 1
          fi
      - name: Run golangci-lint
        run: golangci-lint run --timeout=5m

  test:
    name: Test (matrix)
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.19', '1.20', '1.21' ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage-${{ matrix.go-version }}.out ./...
        env:
          CGO_ENABLED: '1'
      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.go-version }}.out
          path: coverage-${{ matrix.go-version }}.out

  build:
    name: Build (cross-compile)
    needs: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true
      - name: Build example command
        run: |
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ./bin/example-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/
      - name: Test library builds as module
        run: |
          go mod download && go mod verify
